#!/usr/bin/env python3
import rospy
import actionlib
import yaml
from importlib_resources import open_text

from ropod_ros_msgs.msg import GoToAction, GoToGoal
from ropod_ros_msgs.msg import Action, Area, SubArea


def loadGoToAreas(robot_name, case):
    file_name = robot_name + "_" + case + ".yaml"

    with open_text("topological_navigation.test_cases", file_name) as yaml_file:
        areas_msg = yaml.load(yaml_file, Loader=yaml.Loader)

    areas = []

    for area_dict in areas_msg:
        area = area_dict["area"]
        goto_area = Area(
            id=area[0]["id"],
            name=area[1]["name"],
            type=area[2]["type"],
            sub_areas=[
                SubArea(
                    id=area[3]["sub_areas"][0]["id"],
                    name=area[3]["sub_areas"][1]["name"],
                )
            ],
        )
        areas.append(goto_area)

    return areas


def main():
    try:
        route_nav_client = actionlib.SimpleActionClient("/ropod_001/goto", GoToAction)
        rospy.loginfo("Waiting for topological dispatch server")
        route_nav_client.wait_for_server()
        rospy.loginfo("Connected topological dispatch server")

        goal = GoToGoal()
        goal.action = Action()
        goal.action.action_id = "1234567890"
        areas = loadGoToAreas("ropod_001", "2")
        goal.action.areas = areas
        goal.action.type = "GOTO"
        goal.action.start_floor = 0
        goal.action.goal_floor = 0

        rospy.loginfo("[route_nav_client] Sending route nav goal\n{0}".format(goal))
        route_nav_client.send_goal(goal)

        rospy.loginfo("[route_nav_client] Waiting for route navigation result")

        route_nav_client.wait_for_result()

        rospy.loginfo(
            "[route_nav_client] Result\n{0}".format(route_nav_client.get_result())
        )
    except (KeyboardInterrupt, SystemExit):
        print("route_navigation_test interrupted; exiting...")


if __name__ == "__main__":
    rospy.init_node("route_navigation_test")
    main()
